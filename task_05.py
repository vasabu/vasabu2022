
'''1. Написать генератор нечётных чисел от 1 до n (включительно), используя ключевое слово yield,
 например:
>>> odd_to_15 = odd_nums(15)
>>> next(odd_to_15)
1
>>> next(odd_to_15)
3
...
>>> next(odd_to_15)
15
>>> next(odd_to_15)
...StopIteration...'''



import random


def num_gen(n):
    num = random.randrange(1, n+1, 2)
    yield num

# Проверяем функцию
print(next(num_gen(6)))


'''3. Есть два списка:
tutors = [
    'Иван', 'Анастасия', 'Петр', 'Сергей', 
    'Дмитрий', 'Борис', 'Елена'
]
klasses = [
    '9А', '7В', '9Б', '9В', '8Б', '10А'
]
Необходимо реализовать генератор, возвращающий кортежи вида (<tutor>, <klass>), например:
('Иван', '9А')
('Анастасия', '7В')
...
Количество генерируемых кортежей не должно быть больше длины списка tutors. Если в 
списке klasses меньше элементов, чем в списке tutors, необходимо вывести последние кортежи в виде: (<tutor>, None), например:
('Станислав', None)'''




tutors = [
    'Иван', 'Анастасия', 'Петр', 'Сергей',
    'Дмитрий', 'Борис', 'Елена'
]

klasses = [
    '9А', '7В', '9Б', '9В', '8Б', '10А'
]
tut = tutors
klas = klasses
raz_cl = len(tut) - len(klas)
i = 1
if i <= raz_cl:
    klasses.append('None')
    i+=i
klas = klasses
num_gen = (zip(tut, klas)) # Генератор Кортежей + Функция ZIP сама по себе " ленивая"

print(next(num_gen))
print(next(num_gen))
print(next(num_gen))
print(next(num_gen))
print(next(num_gen))
print(next(num_gen))
print(next(num_gen))
print(next(num_gen))
print(next(num_gen))

#Проверка показала норм.

'''4. Представлен список чисел. Необходимо вывести те его элементы, значения которых больше предыдущего, например:
src = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
result = [12, 44, 4, 10, 78, 123]'''

src = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
nums = []
for i in range(1, len(src)):
    y_n = src[i]
    x_n = src[i-1]
    if y_n > x_n:
         nums.append(y_n)
print(nums)

#Проверка норм. показала

'''5. Подумайте, как можно сделать оптимизацию кода по памяти, по скорости.
Представлен список чисел. Определить элементы списка, не имеющие повторений. 
Сформировать из этих элементов список с сохранением порядка их следования в исходном списке,
например:
src = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
result = [23, 1, 3, 10, 4, 11]'''


src = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]


result = [el for el in src if src.count(el) == 1]

print(result)

# list compreheons
# проверка норм.





















